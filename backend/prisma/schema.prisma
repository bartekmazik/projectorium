// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String
  lastName  String
  projects  ProjectUser[]

  tasks TaskUser[]

  @@map("users")
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  projectCode String  @unique

  users ProjectUser[]

  tasks Task[]

  @@map("projects")
}

model ProjectUser {
  userId      Int
  projectId   Int
  role        Role @default(MEMBER)
  pointsCount Int  @default(0)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("project_users")
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  status      TaskStatus @default(TODO)
  points      Int        @default(0)
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id])
  assignedTo  TaskUser[]

  @@map("tasks")
}

model TaskUser {
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([userId, taskId])
  @@map("task_users")
}

enum Role {
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  SUBMITED
  COMPLETED
  DELETED
}
